{ 
"title": "Using ng-bind-html and ngSanitize",
"date": "September, 12, 2015",
"text": "About a few months ago I ran into the issue of wishing to inject html or embedded elements into my blogging system.  The was an issue as the CMS (Content Management System) parsed everything as text.\n<img src = 'img/thumbnail/cms.png' width='200' height = '200'></img>\nYes.. That is my CMS it looks like it's still stuck in the 90's but THIS IS MY CHALLENGE build everything strictly from hard-code and use api's that are only relevant to building a front-end website. Back-end logic is to be handled all by myself.\nBack to the original problem. Here are the links I started off with originally to fix this string sanitization issue.\n<a href='http://odetocode.com/blogs/scott/archive/2014/09/10/a-journey-with-trusted-html-in-angularjs.aspx'>Ode to Code</a>\n<a href ='http://odetocode.com/blogs/scott/archive/2014/09/10/a-journey-with-trusted-html-in-angularjs.aspx'>Stack Overflow1</a>\n<a href='http://odetocode.com/blogs/scott/archive/2014/09/10/a-journey-with-trusted-html-in-angularjs.aspx'>Stack Overflow 2</a>\nWhat originally was the issue was that when creating ths JSON storage file for all my blogs. I used Java's (yes I wanted to learn a bit of JAVA EE dev for my work) JSONObject.put methods. However, this lead to the issue of JSONOBJect treating every input as a string literal. SO I scrapped it and created my own parser. It was not hard.\n<code> String mainBlogText = this.blogEntryVar.replaceAll('(\\\\r|\\\\n|\\\\r\\\\n)+', '\\\\\\\\n').replaceAll('\\'', ''');\n\t\t\n\t\tString blogEntryJSON = '{ \n';\n\t\tblogEntryJSON += '\\'title\\': \\'' + this.titleVar  + '\\',\n';\n\t\tblogEntryJSON += '\\'date\\': \\'' + this.dateVar  + '\\',\n';\n\t\tblogEntryJSON += '\\'text\\': \\'' + mainBlogText  + '\\',\n';\n\t\tblogEntryJSON += '\\'thumbnail\\': \\'' + this.locateVar  + '\\',\n';\n\t\tblogEntryJSON += '\\'link\\': \\'' + this.linkVar  + '\\',\n';\n\t\tblogEntryJSON += '\\'linkText\\': \\'' + this.linkNameVar  + '\\' \n';\n\t\t\n\t\tblogEntryJSON += '}';</code>\nOne the string was created it was sent into a file writer and outputted into a file that was later parsed by angular. However, that was where I ran into the problem of runnning into Angular's sanitization. It too by default did not allow for html tag injection. This of  course is due to the simplicity of XSS attacks if allowed and a slew of JS based problems.\nHowever, angular does come with a solution <b>ngSantize</b> and <b>ng-bind-html</b>, this is particularly great as I did not have to scrap the templating framework I built from using angular MVC framework. But it also prevented JS injections as well.\nHere's how it works:\nAdd ngSanitze to index.html\n<code>&lt;script src='angular-sanitize.js'&gt;&lt;/script&gt;</code>\nor use the online url version\nonce added go into your app code and add\n<code> var myApp = angular.module('App1', ['ngSanitize'])</code> \nalso in your controller add\n<code>myApp.controller('Ctrl', ['$scope','$sce', function($scope,$sce){</code>\nThe $sce will allow you to call a trustHTML function that parses out evil tags\n<code>$sce.data = $sce.trustAsHtml(data)</code>\nafter that finally add the ng-bind-html call to your html template file that is connected to your controller.\n<code>&lt;p ng-bind-html='myHTML'&gt;&lt;/p&gt;</code>\nTHAT'S it literrally as I write this, this code was implemented yesterday and when I hope that when I click the send button in my cms that it will actually appear in properly with the html injections I performed. This is brand new frontier, with me testing out new things. Here goes to brand new school year\nUpdate:Code looks pretty ugly....on this website gotta update it ><",
"thumbnail": "img/thumbnail/angular.jpg",
"link": "",
"linkText": "" 
}